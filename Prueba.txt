
Notebook@DESKTOP-GT76BPS MINGW64 ~/Desktop/GIT
$ git branch
fatal: not a git repository (or any of the parent directories): .git

Notebook@DESKTOP-GT76BPS MINGW64 ~/Desktop/GIT
$ git branch -main
fatal: not a git repository (or any of the parent directories): .git

Notebook@DESKTOP-GT76BPS MINGW64 ~/Desktop/GIT
$ gitini
bash: gitini: command not found

Notebook@DESKTOP-GT76BPS MINGW64 ~/Desktop/GIT
$ git.ini
bash: git.ini: command not found

Notebook@DESKTOP-GT76BPS MINGW64 ~/Desktop/GIT
$ git ini
git: 'ini' is not a git command. See 'git --help'.

The most similar commands are
        init
        gui
        init-db

Notebook@DESKTOP-GT76BPS MINGW64 ~/Desktop/GIT
$ git init
Initialized empty Git repository in C:/Users/Notebook/Desktop/GIT/.git/

Notebook@DESKTOP-GT76BPS MINGW64 ~/Desktop/GIT (master)
$ git brach -m main
git: 'brach' is not a git command. See 'git --help'.

The most similar command is
        branch

Notebook@DESKTOP-GT76BPS MINGW64 ~/Desktop/GIT (master)
$ git branch -m main

Notebook@DESKTOP-GT76BPS MINGW64 ~/Desktop/GIT (main)
$ dir
Prueba.txt

Notebook@DESKTOP-GT76BPS MINGW64 ~/Desktop/GIT (main)
$ dir
Prueba.txt

Notebook@DESKTOP-GT76BPS MINGW64 ~/Desktop/GIT (main)
$ git status
On branch main

No commits yet

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        Prueba.txt

nothing added to commit but untracked files present (use "git add" to track)

Notebook@DESKTOP-GT76BPS MINGW64 ~/Desktop/GIT (main)
$ git add Prueba.txt

Notebook@DESKTOP-GT76BPS MINGW64 ~/Desktop/GIT (main)
$ git status
On branch main

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
        new file:   Prueba.txt


Notebook@DESKTOP-GT76BPS MINGW64 ~/Desktop/GIT (main)
$ #todo lo que se haga de la at esta contextualizado a git

Notebook@DESKTOP-GT76BPS MINGW64 ~/Desktop/GIT (main)
$ comm
comm.exe  command

Notebook@DESKTOP-GT76BPS MINGW64 ~/Desktop/GIT (main)
$ git commits -m "En este commits aprendimos esto"
git: 'commits' is not a git command. See 'git --help'.

The most similar command is
        commit

Notebook@DESKTOP-GT76BPS MINGW64 ~/Desktop/GIT (main)
$ git commit -m "En este commits aprendimos esto"
[main (root-commit) 64f1aeb] En este commits aprendimos esto
 1 file changed, 1 insertion(+)
 create mode 100644 Prueba.txt

Notebook@DESKTOP-GT76BPS MINGW64 ~/Desktop/GIT (main)
$ dir
Prueba.txt

Notebook@DESKTOP-GT76BPS MINGW64 ~/Desktop/GIT (main)
$ git commit -m "En este commits aprendimos esto"
On branch main
nothing to commit, working tree clean

Notebook@DESKTOP-GT76BPS MINGW64 ~/Desktop/GIT (main)
$ ^[[200~echo "# Marcelo" >> README.md
git branch -M main
git remote add origin https://github.com/marcelor57/Marcelo.git
git push -u origin mainbash: $'\E[200~echo': command not found

Notebook@DESKTOP-GT76BPS MINGW64 ~/Desktop/GIT (main)
$ git init
Reinitialized existing Git repository in C:/Users/Notebook/Desktop/GIT/.git/

Notebook@DESKTOP-GT76BPS MINGW64 ~/Desktop/GIT (main)
$ git add README.md

Notebook@DESKTOP-GT76BPS MINGW64 ~/Desktop/GIT (main)
$ git commit -m "first commit"
[main b207b76] first commit
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 README.md

Notebook@DESKTOP-GT76BPS MINGW64 ~/Desktop/GIT (main)
$ git branch -M main

Notebook@DESKTOP-GT76BPS MINGW64 ~/Desktop/GIT (main)
$ git remote add origin https://github.com/marcelor57/Marcelo.git

Notebook@DESKTOP-GT76BPS MINGW64 ~/Desktop/GIT (main)
$ git push -u origin main


Notebook@DESKTOP-GT76BPS MINGW64 ~/Desktop/GIT (main)
$ git remote add origin https://github.com/marcelor57/Marcelo.git
error: remote origin already exists.

Notebook@DESKTOP-GT76BPS MINGW64 ~/Desktop/GIT (main)
$ git remote add origin https://github.com/marcelor57/Marcelo.git
error: remote origin already exists.

Notebook@DESKTOP-GT76BPS MINGW64 ~/Desktop/GIT (main)
$ git push -u origin main
info: please complete authentication in your browser...
Enumerating objects: 6, done.
Counting objects: 100% (6/6), done.
Delta compression using up to 8 threads
Compressing objects: 100% (3/3), done.
Writing objects: 100% (6/6), 470 bytes | 470.00 KiB/s, done.
Total 6 (delta 0), reused 0 (delta 0), pack-reused 0
To https://github.com/marcelor57/Marcelo.git
 * [new branch]      main -> main
branch 'main' set up to track 'origin/main'.

Notebook@DESKTOP-GT76BPS MINGW64 ~/Desktop/GIT (main)
$ git status
On branch main
Your branch is up to date with 'origin/main'.

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   Prueba.txt

no changes added to commit (use "git add" and/or "git commit -a")

Notebook@DESKTOP-GT76BPS MINGW64 ~/Desktop/GIT (main)
$ git commit -m "modificacion2"
On branch main
Your branch is up to date with 'origin/main'.

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   Prueba.txt

no changes added to commit (use "git add" and/or "git commit -a")

Notebook@DESKTOP-GT76BPS MINGW64 ~/Desktop/GIT (main)
$ git add commit -m "modificacion2"
error: unknown switch `m'
usage: git add [<options>] [--] <pathspec>...

    -n, --dry-run         dry run
    -v, --verbose         be verbose

    -i, --interactive     interactive picking
    -p, --patch           select hunks interactively
    -e, --edit            edit current diff and apply
    -f, --force           allow adding otherwise ignored files
    -u, --update          update tracked files
    --renormalize         renormalize EOL of tracked files (implies -u)
    -N, --intent-to-add   record only the fact that the path will be added later
    -A, --all             add changes from all tracked and untracked files
    --ignore-removal      ignore paths removed in the working tree (same as --no-all)
    --refresh             don't add, only refresh the index
    --ignore-errors       just skip files which cannot be added because of errors
    --ignore-missing      check if - even missing - files are ignored in dry run
    --sparse              allow updating entries outside of the sparse-checkout cone
    --chmod (+|-)x        override the executable bit of the listed files
    --pathspec-from-file <file>
                          read pathspec from file
    --pathspec-file-nul   with --pathspec-from-file, pathspec elements are separated with NUL character


Notebook@DESKTOP-GT76BPS MINGW64 ~/Desktop/GIT (main)
$ git add Prueba.txt

Notebook@DESKTOP-GT76BPS MINGW64 ~/Desktop/GIT (main)
$ git status
On branch main
Your branch is up to date with 'origin/main'.

Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        modified:   Prueba.txt


Notebook@DESKTOP-GT76BPS MINGW64 ~/Desktop/GIT (main)
$ git commit -m "modificacion2"
[main b44cf2e] modificacion2
 1 file changed, 1 insertion(+), 1 deletion(-)

Notebook@DESKTOP-GT76BPS MINGW64 ~/Desktop/GIT (main)
$ git push -u origin main
Enumerating objects: 5, done.
Counting objects: 100% (5/5), done.
Delta compression using up to 8 threads
Compressing objects: 100% (2/2), done.
Writing objects: 100% (3/3), 295 bytes | 295.00 KiB/s, done.
Total 3 (delta 0), reused 0 (delta 0), pack-reused 0
To https://github.com/marcelor57/Marcelo.git
   b207b76..b44cf2e  main -> main
branch 'main' set up to track 'origin/main'.

Notebook@DESKTOP-GT76BPS MINGW64 ~/Desktop/GIT (main)
$ ^C

Notebook@DESKTOP-GT76BPS MINGW64 ~/Desktop/GIT (main)
$
